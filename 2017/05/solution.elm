module Main exposing (..)

import Html exposing (program)
import Html.Attributes as A
import Dict exposing (Dict)
import ParseInt


input =
    "2\n1\n2\n-2\n0\n0\n-5\n0\n-3\n-5\n-8\n-2\n-1\n-2\n-1\n-9\n-10\n1\n-11\n-5\n-9\n-7\n-13\n-19\n-22\n1\n0\n-3\n2\n-9\n-4\n-5\n-15\n-13\n-30\n-21\n-4\n0\n-34\n0\n-31\n0\n-29\n-42\n-1\n2\n-24\n-16\n-16\n-12\n-22\n-37\n-16\n-34\n-46\n-12\n-53\n-12\n-23\n-44\n-1\n-29\n-9\n-52\n-17\n-30\n-60\n-5\n-29\n-26\n-48\n-55\n-10\n0\n-50\n-1\n-8\n2\n-37\n-74\n-63\n-39\n-7\n-81\n-33\n-62\n-59\n-20\n-58\n-54\n-23\n-19\n-80\n-39\n0\n0\n-92\n-75\n-24\n0\n-73\n-36\n-14\n1\n-102\n-97\n-30\n-105\n-99\n-84\n-46\n-67\n-88\n-86\n-94\n-53\n-88\n0\n-100\n-86\n-11\n-93\n-99\n-21\n-2\n-108\n-6\n0\n-113\n-116\n-127\n-42\n-131\n-124\n-24\n-56\n-63\n-130\n-118\n-52\n-139\n-43\n-90\n-123\n-7\n-93\n-117\n-34\n-59\n-140\n-103\n-52\n-115\n-83\n-42\n-92\n-48\n-82\n-104\n-38\n-2\n-28\n-150\n-39\n-30\n-71\n-146\n-55\n-114\n-141\n-158\n-55\n-21\n-121\n-142\n-137\n-119\n-99\n-113\n-99\n-33\n-99\n-20\n-129\n-83\n-64\n-179\n-182\n-43\n-86\n-50\n-135\n-186\n-68\n-100\n-181\n-22\n-106\n-178\n-157\n-46\n-41\n-80\n-166\n-77\n-81\n-144\n-132\n-81\n-11\n-38\n-57\n-69\n-13\n-79\n-146\n-1\n-165\n-52\n-134\n-86\n-160\n-97\n-220\n-92\n-200\n-145\n-175\n-138\n-205\n-127\n-165\n-155\n-211\n-134\n-31\n-118\n-190\n-40\n-182\n-96\n-134\n-93\n-84\n-76\n-34\n-33\n-203\n-16\n-245\n-167\n-102\n-5\n-44\n-239\n-127\n-255\n-116\n-61\n-140\n-238\n-69\n-254\n-203\n-178\n-229\n-250\n-120\n-109\n-153\n-108\n-137\n-247\n2\n-151\n-270\n-164\n-62\n-186\n-272\n-190\n-180\n-70\n-179\n-38\n-208\n-215\n-151\n-156\n-62\n-57\n-275\n-182\n-169\n-264\n-70\n-279\n-55\n-287\n-57\n-3\n-67\n-155\n-213\n-17\n2\n-200\n-291\n-179\n-175\n-73\n-257\n-47\n-118\n-206\n-93\n-293\n-199\n-102\n-118\n-188\n-66\n-288\n-21\n-204\n-80\n-237\n-175\n-297\n-235\n-168\n-262\n2\n-162\n-95\n1\n-286\n-318\n-9\n-213\n-159\n-127\n-175\n-266\n-240\n-268\n-245\n-196\n-281\n-86\n-202\n-127\n-144\n-157\n-333\n-122\n-230\n-182\n-38\n-296\n-12\n-224\n-123\n-40\n-6\n-324\n-135\n-289\n-85\n-179\n-37\n-58\n-125\n-228\n-124\n-250\n-73\n-35\n-286\n-267\n-257\n-348\n-83\n-3\n-98\n-99\n-273\n-118\n-310\n-23\n-299\n-96\n-51\n-273\n-79\n-112\n-355\n-48\n-219\n-10\n-103\n-18\n-201\n-108\n-34\n-362\n-165\n-359\n-347\n-157\n-148\n-20\n-344\n-66\n-337\n-387\n-62\n-125\n-4\n-355\n-322\n-263\n-381\n-108\n-25\n-262\n-425\n-100\n-54\n-315\n-221\n-268\n-211\n-321\n-89\n-124\n-297\n-22\n-162\n-117\n-430\n-152\n-373\n-256\n-37\n-61\n-59\n-436\n-377\n-346\n-245\n-167\n-451\n-392\n-382\n-248\n-254\n-382\n-249\n-267\n-216\n-205\n-310\n-326\n-144\n-107\n-65\n-382\n-79\n-401\n-370\n-221\n-283\n-269\n-64\n-207\n-262\n-181\n-146\n-52\n-169\n-147\n-225\n-179\n-215\n-116\n-115\n-37\n-227\n-250\n-228\n-132\n-414\n-425\n-230\n-224\n-319\n-42\n-353\n-285\n-38\n-145\n-263\n-25\n-142\n-296\n-267\n-43\n-315\n-352\n-105\n-275\n-354\n-66\n-414\n-464\n-215\n-107\n-267\n-394\n-10\n-27\n-315\n-286\n-113\n-454\n-400\n-468\n-245\n-18\n-427\n-479\n-281\n-43\n-29\n-15\n-371\n-127\n-371\n-251\n-343\n-267\n-355\n-271\n-68\n-454\n-532\n-264\n-513\n-170\n-484\n-85\n-329\n-389\n-317\n-382\n-535\n-169\n-395\n-53\n-429\n-394\n-465\n-250\n-419\n-434\n-84\n-130\n-229\n-496\n-336\n-388\n-412\n-123\n-502\n-205\n-367\n-224\n-40\n-551\n-99\n-394\n-321\n-515\n-260\n-410\n-518\n-22\n-23\n-259\n-397\n-306\n-199\n-157\n-49\n-298\n-176\n-564\n-271\n-6\n-297\n-514\n-432\n-455\n-192\n-95\n-447\n-237\n-571\n-543\n-229\n-405\n-282\n-235\n-380\n-25\n-603\n-335\n-94\n-533\n-463\n-396\n-421\n-393\n-588\n-376\n-152\n-328\n-460\n-90\n-315\n-533\n-207\n-590\n-100\n-588\n-574\n-259\n-183\n-522\n-424\n-272\n-341\n-443\n-217\n-143\n-26\n-196\n-632\n-520\n-606\n-277\n-176\n-547\n-564\n-444\n-228\n-223\n-115\n-200\n-616\n-576\n-398\n-157\n-78\n-586\n-12\n-650\n-239\n-152\n-20\n-366\n-100\n-478\n-666\n-247\n-105\n-230\n-218\n-48\n-238\n0\n-387\n-660\n-542\n-189\n-339\n-577\n-527\n-273\n-565\n-230\n-578\n-147\n-106\n-373\n-513\n-8\n-465\n-66\n-408\n-351\n-357\n-119\n-251\n-626\n-81\n-575\n-542\n-193\n-219\n-189\n-635\n-77\n-517\n-608\n-309\n-716\n-712\n-287\n-67\n-312\n-334\n-584\n-687\n-488\n-612\n-42\n-180\n-726\n-235\n-606\n-538\n-470\n-477\n-504\n-278\n-24\n-435\n-610\n-540\n-646\n-503\n-151\n-350\n-43\n-699\n-459\n-516\n-424\n-343\n-297\n-460\n-592\n-30\n-614\n-125\n-425\n-180\n-73\n-550\n-361\n-390\n-380\n-518\n-418\n-305\n-326\n-84\n-675\n-320\n-557\n-486\n-457\n-414\n-69\n-228\n-683\n-610\n-188\n-608\n-480\n-225\n-186\n-374\n-256\n-672\n-145\n-323\n-453\n-252\n-214\n-600\n-49\n-652\n-593\n-93\n-42\n-101\n-600\n-422\n-146\n-191\n-474\n-725\n-568\n-572\n-498\n-506\n-702\n-120\n-210\n-340\n-482\n-210\n-666\n-520\n-647\n-219\n-435\n-455\n-814\n-304\n-610\n-224\n-95\n-425\n-456\n-761\n-339\n-256\n-793\n-49\n-317\n-274\n-374\n-620\n-730\n-130\n-128\n-420\n-315\n-47\n-92\n-467\n-269\n-563\n-495\n-501\n-32\n-755\n-774\n-154\n1\n-685\n-657\n-38\n-727\n-428\n-293\n-68\n-203\n-850\n-775\n-545\n-740\n-683\n-728\n-502\n-520\n-44\n-53\n-826\n-555\n-539\n-291\n-435\n-673\n-865\n-114\n-467\n-679\n-598\n-611\n-566\n-606\n-320\n-124\n-430\n-240\n-85\n-549\n-847\n-481\n-444\n-792\n-695\n-405\n-427\n-292\n-533\n-91\n-5\n-546\n-181\n-156\n-488\n-29\n-17\n-572\n-510\n-663\n-321\n-177\n-516\n-85\n-829\n-109\n-236\n-876\n-141\n-427\n-180\n-576\n-45\n-178\n-6\n-236\n-381\n-638\n-144\n-391\n-739\n-43\n-898\n-896\n-395\n-280\n-712\n-127\n-823\n-130\n-783\n-324\n-29\n-136\n-941\n-816\n-712\n-120\n-639\n-209\n-522\n-618\n-205\n-557\n-153\n-451\n-280\n-214\n-683\n-134\n-329\n-403\n-156\n-645\n-194\n-811\n-377\n-161\n-620\n-920\n-225\n-632\n-543\n-658\n-864\n-137\n-928\n-616\n-728\n-145\n-182\n-879\n-595\n-598\n-409\n-934\n-23\n-58\n-301\n-427\n-599\n-562\n-373\n-656\n-360\n-783\n-68\n-228\n-712\n-912\n-260\n-490\n-588\n-481\n-610\n-615\n-180\n-914\n-960\n-462\n-522\n-782\n-617\n-687\n-477\n-934\n-54\n-201\n-279\n-101\n-27\n-759\n-407\n-187\n-202\n-715\n-488\n-206\n-802\n-737\n-18\n-364\n-325\n-155\n-573\n-536\n-769\n-747\n-669\n-856\n-521\n-24\n-921\n-394\n-726\n-251\n-5\n-533\n-923\n-752\n-28\n-775\n-100\n-801\n-22\n-723\n-383\n-952\n-355\n-1058\n-975\n-975\n-706\n-843\n-75\n-124\n-150\n-98\n-1019\n-195\n-342\n-915"


xinput : List Int
xinput =
    [ 2, 1, 2, -2, 0, 0, -5, 0, -3, -5, -8, -2, -1, -2, -1, -9, -10, 1, -11, -5, -9, -7, -13, -19, -22, 1, 0, -3, 2, -9, -4, -5, -15, -13, -30, -21, -4, 0, -34, 0, -31, 0, -29, -42, -1, 2, -24, -16, -16, -12, -22, -37, -16, -34, -46, -12, -53, -12, -23, -44, -1, -29, -9, -52, -17, -30, -60, -5, -29, -26, -48, -55, -10, 0, -50, -1, -8, 2, -37, -74, -63, -39, -7, -81, -33, -62, -59, -20, -58, -54, -23, -19, -80, -39, 0, 0, -92, -75, -24, 0, -73, -36, -14, 1, -102, -97, -30, -105, -99, -84, -46, -67, -88, -86, -94, -53, -88, 0, -100, -86, -11, -93, -99, -21, -2, -108, -6, 0, -113, -116, -127, -42, -131, -124, -24, -56, -63, -130, -118, -52, -139, -43, -90, -123, -7, -93, -117, -34, -59, -140, -103, -52, -115, -83, -42, -92, -48, -82, -104, -38, -2, -28, -150, -39, -30, -71, -146, -55, -114, -141, -158, -55, -21, -121, -142, -137, -119, -99, -113, -99, -33, -99, -20, -129, -83, -64, -179, -182, -43, -86, -50, -135, -186, -68, -100, -181, -22, -106, -178, -157, -46, -41, -80, -166, -77, -81, -144, -132, -81, -11, -38, -57, -69, -13, -79, -146, -1, -165, -52, -134, -86, -160, -97, -220, -92, -200, -145, -175, -138, -205, -127, -165, -155, -211, -134, -31, -118, -190, -40, -182, -96, -134, -93, -84, -76, -34, -33, -203, -16, -245, -167, -102, -5, -44, -239, -127, -255, -116, -61, -140, -238, -69, -254, -203, -178, -229, -250, -120, -109, -153, -108, -137, -247, 2, -151, -270, -164, -62, -186, -272, -190, -180, -70, -179, -38, -208, -215, -151, -156, -62, -57, -275, -182, -169, -264, -70, -279, -55, -287, -57, -3, -67, -155, -213, -17, 2, -200, -291, -179, -175, -73, -257, -47, -118, -206, -93, -293, -199, -102, -118, -188, -66, -288, -21, -204, -80, -237, -175, -297, -235, -168, -262, 2, -162, -95, 1, -286, -318, -9, -213, -159, -127, -175, -266, -240, -268, -245, -196, -281, -86, -202, -127, -144, -157, -333, -122, -230, -182, -38, -296, -12, -224, -123, -40, -6, -324, -135, -289, -85, -179, -37, -58, -125, -228, -124, -250, -73, -35, -286, -267, -257, -348, -83, -3, -98, -99, -273, -118, -310, -23, -299, -96, -51, -273, -79, -112, -355, -48, -219, -10, -103, -18, -201, -108, -34, -362, -165, -359, -347, -157, -148, -20, -344, -66, -337, -387, -62, -125, -4, -355, -322, -263, -381, -108, -25, -262, -425, -100, -54, -315, -221, -268, -211, -321, -89, -124, -297, -22, -162, -117, -430, -152, -373, -256, -37, -61, -59, -436, -377, -346, -245, -167, -451, -392, -382, -248, -254, -382, -249, -267, -216, -205, -310, -326, -144, -107, -65, -382, -79, -401, -370, -221, -283, -269, -64, -207, -262, -181, -146, -52, -169, -147, -225, -179, -215, -116, -115, -37, -227, -250, -228, -132, -414, -425, -230, -224, -319, -42, -353, -285, -38, -145, -263, -25, -142, -296, -267, -43, -315, -352, -105, -275, -354, -66, -414, -464, -215, -107, -267, -394, -10, -27, -315, -286, -113, -454, -400, -468, -245, -18, -427, -479, -281, -43, -29, -15, -371, -127, -371, -251, -343, -267, -355, -271, -68, -454, -532, -264, -513, -170, -484, -85, -329, -389, -317, -382, -535, -169, -395, -53, -429, -394, -465, -250, -419, -434, -84, -130, -229, -496, -336, -388, -412, -123, -502, -205, -367, -224, -40, -551, -99, -394, -321, -515, -260, -410, -518, -22, -23, -259, -397, -306, -199, -157, -49, -298, -176, -564, -271, -6, -297, -514, -432, -455, -192, -95, -447, -237, -571, -543, -229, -405, -282, -235, -380, -25, -603, -335, -94, -533, -463, -396, -421, -393, -588, -376, -152, -328, -460, -90, -315, -533, -207, -590, -100, -588 ]


parsed : List Int
parsed =
    Debug.log "parsed" <|
        List.map
            (\s ->
                let
                    parse : String -> Int
                    parse =
                        ParseInt.parseInt >> Result.toMaybe >> Maybe.withDefault 0
                in
                    case String.toList s of
                        head :: tail ->
                            if head == '-' then
                                (parse <| String.fromList tail) * -1
                            else
                                parse s

                        [] ->
                            0
            )
            (String.split "\n" input)


inputDict : Dict Int Int
inputDict =
    Dict.fromList (List.indexedMap (,) parsed)


pt1 : Dict Int Int -> Int
pt1 w =
    let
        go : ( Int, Int, Dict Int Int ) -> Int
        go ( steps, pos, d ) =
            case Dict.get pos d of
                Nothing ->
                    steps

                Just off ->
                    go
                        ( (steps + 1)
                        , (pos + off)
                        , (Dict.update pos (Maybe.andThen (\x -> Just (x + 1))) d)
                        )
    in
        go ( 0, 0, w )


pt2 : Dict Int Int -> Int
pt2 w =
    let
        go : ( Int, Int, Dict Int Int ) -> Int
        go ( steps, pos, d ) =
            case Dict.get pos d of
                Nothing ->
                    steps

                Just off ->
                    go
                        ( (steps + 1)
                        , (pos + off)
                        , (Dict.update pos
                            (Maybe.andThen
                                (\x ->
                                    if x >= 3 then
                                        Just (x - 1)
                                    else
                                        Just (x + 1)
                                )
                            )
                            d
                          )
                        )
    in
        go ( 0, 0, w )


main : Program Never () a
main =
    program
        { init = ( (), Cmd.none )
        , update = \_ _ -> ( (), Cmd.none )
        , view =
            \_ ->
                Html.div [ A.style [ ( "padding", "5px" ) ] ]
                    [ Html.div [] [ Html.text (toString (pt1 inputDict)) ]
                    , Html.div [] [ Html.text (toString (pt2 inputDict)) ]
                    ]
        , subscriptions = \_ -> Sub.none
        }
