{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
github:              "{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}"
license:             BSD3
author:              "{{author-name}}{{^author-name}}Author name here{{/author-name}}"
maintainer:          "{{author-email}}{{^author-email}}example@example.com{{/author-email}}"
copyright:           "{{copyright}}{{^copyright}}{{year}}{{^year}}2019{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}"

description:         Solution for an Advent of Code challenge

dependencies:
  - base >= 4.7 && < 5
  - advent-of-code
  - bytestring
  - containers
  - cryptohash-md5
  - lens
  - monad-loops
  - mtl
  - split
  - text
  - utf8-string

default-extensions:
  - BangPatterns
  - BinaryLiterals
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveLift
  - DeriveTraversable
  - EmptyCase
  - LambdaCase
  - MultiParamTypeClasses
  - NamedFieldPuns
  - OverloadedStrings
  - OverloadedStrings
  - PartialTypeSignatures
  - ViewPatterns

ghc-options:
  - -Wall
  - -Wcompat
  - -Wincomplete-record-updates
  - -Wincomplete-uni-patterns
  - -Wredundant-constraints
  - -fno-warn-partial-type-signatures
  - -fno-warn-name-shadowing
  - -fwarn-tabs
  - -fno-warn-unused-imports
  - -fwarn-missing-signatures
  - -fwarn-incomplete-patterns

library:
  source-dirs: src

executables:
  aoc:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}
    - hspec

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE stack.yaml #-}
resolver: lts-16.22

packages:
- .

extra-deps:
- ../../util/haskell/advent-of-code

{-# START_FILE test/Spec.hs #-}
import Control.Exception (catch, throw)
import Data.Maybe (fromJust)
import Lib
import System.IO.Error (IOError, isDoesNotExistError)
import Test.Hspec (describe, it, parallel, pendingWith, shouldBe)
import Test.Hspec.Runner (hspec)

main :: IO ()
main =
    hspec $
    parallel $ do
        describe "part 1" $ do
            it "example 1" $ do
                let fileName = "./ex1_1.txt"
                mContents <-
                    (Just <$> readFile fileName) `catch`
                    (\e ->
                         if isDoesNotExistError e
                             then return Nothing
                             else throw (e :: IOError))
                case mContents of
                    Nothing ->
                        pendingWith ("File " <> fileName <> " does not exist")
                    Just contents -> answer1 (parse1 contents) `shouldBe` ex1_1
            it "example 2" $ do
                let fileName = "./ex1_2.txt"
                mContents <-
                    (Just <$> readFile fileName) `catch`
                    (\e ->
                         if isDoesNotExistError e
                             then return Nothing
                             else throw (e :: IOError))
                case mContents of
                    Nothing ->
                        pendingWith ("File " <> fileName <> " does not exist")
                    Just contents -> answer1 (parse1 contents) `shouldBe` ex1_2
            it "example 3" $ do
                let fileName = "./ex1_3.txt"
                mContents <-
                    (Just <$> readFile fileName) `catch`
                    (\e ->
                         if isDoesNotExistError e
                             then return Nothing
                             else throw (e :: IOError))
                case mContents of
                    Nothing ->
                        pendingWith ("File " <> fileName <> " does not exist")
                    Just contents -> answer1 (parse1 contents) `shouldBe` ex1_3
            it "example 4" $ do
                let fileName = "./ex1_4.txt"
                mContents <-
                    (Just <$> readFile fileName) `catch`
                    (\e ->
                         if isDoesNotExistError e
                             then return Nothing
                             else throw (e :: IOError))
                case mContents of
                    Nothing ->
                        pendingWith ("File " <> fileName <> " does not exist")
                    Just contents -> answer1 (parse1 contents) `shouldBe` ex1_4
            it "example 5" $ do
                let fileName = "./ex1_5.txt"
                mContents <-
                    (Just <$> readFile fileName) `catch`
                    (\e ->
                         if isDoesNotExistError e
                             then return Nothing
                             else throw (e :: IOError))
                case mContents of
                    Nothing ->
                        pendingWith ("File " <> fileName <> " does not exist")
                    Just contents -> answer1 (parse1 contents) `shouldBe` ex1_5
        describe "part 2" $ do
            it "example 1" $ do
                let fileName = "./ex2_1.txt"
                mContents <-
                    (Just <$> readFile fileName) `catch`
                    (\e ->
                         if isDoesNotExistError e
                             then return Nothing
                             else throw (e :: IOError))
                case mContents of
                    Nothing ->
                        pendingWith ("File " <> fileName <> " does not exist")
                    Just contents -> answer2 (parse2 contents) `shouldBe` ex2_1
            it "example 2" $ do
                let fileName = "./ex2_2.txt"
                mContents <-
                    (Just <$> readFile fileName) `catch`
                    (\e ->
                         if isDoesNotExistError e
                             then return Nothing
                             else throw (e :: IOError))
                case mContents of
                    Nothing ->
                        pendingWith ("File " <> fileName <> " does not exist")
                    Just contents -> answer2 (parse2 contents) `shouldBe` ex2_2
            it "example 3" $ do
                let fileName = "./ex2_3.txt"
                mContents <-
                    (Just <$> readFile fileName) `catch`
                    (\e ->
                         if isDoesNotExistError e
                             then return Nothing
                             else throw (e :: IOError))
                case mContents of
                    Nothing ->
                        pendingWith ("File " <> fileName <> " does not exist")
                    Just contents -> answer2 (parse2 contents) `shouldBe` ex2_3
            it "example 4" $ do
                let fileName = "./ex2_4.txt"
                mContents <-
                    (Just <$> readFile fileName) `catch`
                    (\e ->
                         if isDoesNotExistError e
                             then return Nothing
                             else throw (e :: IOError))
                case mContents of
                    Nothing ->
                        pendingWith ("File " <> fileName <> " does not exist")
                    Just contents -> answer2 (parse2 contents) `shouldBe` ex2_4
            it "example 5" $ do
                let fileName = "./ex2_5.txt"
                mContents <-
                    (Just <$> readFile fileName) `catch`
                    (\e ->
                         if isDoesNotExistError e
                             then return Nothing
                             else throw (e :: IOError))
                case mContents of
                    Nothing ->
                        pendingWith ("File " <> fileName <> " does not exist")
                    Just contents -> answer2 (parse2 contents) `shouldBe` ex2_5

{-# START_FILE src/Lib.hs #-}
module Lib where

--import Prelude hiding (lookup)
--import Data.ByteString (ByteString)
--import Data.Map (Map)
--import Data.Set (Set)
import AdventOfCode.Util ()
import Control.Applicative ()
import Control.Monad.State.Lazy ()
import Crypto.Hash.MD5 ()
import qualified Data.ByteString as BS ()
import Data.ByteString.UTF8 ()
import Data.List ()
import Data.List.Split ()
import Data.Maybe ()
import Data.Monoid ()
import Data.Sequence ()
import qualified Data.Map as Map ()
import qualified Data.Set as Set ()

parse1 :: String -> _
parse1 = id

parse2 :: String -> _
parse2 = parse1

answer1 :: _ -> _
answer1 = id

answer2 :: _ -> _
answer2 = id

show1 :: Show _a => _a -> String
show1 = show

show2 :: Show _a => _a -> String
show2 = show

ex1_1 :: _
ex1_1 = undefined

ex1_2 :: _
ex1_2 = undefined

ex1_3 :: _
ex1_3 = undefined

ex1_4 :: _
ex1_4 = undefined

ex1_5 :: _
ex1_5 = undefined

ex2_1 :: _
ex2_1 = undefined

ex2_2 :: _
ex2_2 = undefined

ex2_3 :: _
ex2_3 = undefined

ex2_4 :: _
ex2_4 = undefined

ex2_5 :: _
ex2_5 = undefined

{-# START_FILE app/Main.hs #-}
module Main where

import Control.Monad (when)
import Data.Set (fromList, member, null)
import Lib
import Prelude hiding (null)
import System.Environment (getArgs)
import System.IO (stderr, stdout, hPutStr, hPutStrLn)

main :: IO ()
main = do
    contents <- getContents
    args <- fromList <$> getArgs
    let pt1 = member "--pt1" args || null args
    let pt2 = member "--pt2" args || null args
    when pt1 $ do
        hPutStrLn stderr "part 1:"
        hPutStr stderr $ show1 $ answer1 $ parse1 contents
        hPutStr stderr "\n"
        when (not pt2) $ putStr $ show1 $ answer1 $ parse1 contents
    when pt2 $ do
        hPutStrLn stderr "part 2:"
        hPutStr stderr $ show2 $ answer2 $ parse2 contents
        hPutStr stderr "\n"
        when (not pt1) $ putStr $ show2 $ answer2 $ parse2 contents

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2019{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

{-# START_FILE .gitignore #-}
.stack-work/
*~
